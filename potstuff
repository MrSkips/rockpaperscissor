import requests
from PyQt5.QtGui import QImage, QPalette, QBrush
from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow
from PyQt5.QtCore import QTimer, Qt
from newsapi import NewsApiClient

# Set up News API client
news_api = NewsApiClient(api_key='be3eab53efa44749943bb924a49fca24')

class NewsDisplayWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        # Set window properties
        self.setWindowTitle("News Display")
        self.setGeometry(0, 0, 800, 480)
        self.setWindowFlags(Qt.FramelessWindowHint)

        # Set up label for displaying news headline and image
        self.news_label = QLabel(self)
        self.news_label.setGeometry(0, 0, 800, 480)
        self.news_label.setAlignment(Qt.AlignCenter)
        self.news_label.setStyleSheet("QLabel { color : white; font-size: 36px; }")

        # Set up timer for updating news every 15 seconds
        self.news_timer = QTimer()
        self.news_timer.timeout.connect(self.update_news)
        self.news_timer.start(15000)

        # Initialize news headline and image
        self.news_headline = ''
        self.news_image_url = ''

        # Update news display
        self.update_news()

    def update_news(self):
        # Get top headlines from News API
        top_headlines = news_api.get_top_headlines(language='en', country='us')

        # Select first headline and extract headline text and image URL
        article = top_headlines['articles'][0]
        self.news_headline = article['title']
        self.news_image_url = article['urlToImage']

        # Download image and set as window background
        image_data = requests.get(self.news_image_url).content
        image = QImage.fromData(image_data)
        palette = QPalette()
        palette.setBrush(QPalette.Background, QBrush(image))
        self.setPalette(palette)

        # Update news label with headline text
        self.news_label.setText(self.news_headline)

    def keyPressEvent(self, event):
        # Close window when 'q' is pressed
        if event.key() == Qt.Key_Q:
            self.close()

if __name__ == "__main__":
    app = QApplication([])
    window = NewsDisplayWindow()
    window.showFullScreen()
    app.exec_()
import requests
from PyQt5.QtGui import QImage, QPalette, QBrush
from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow
from PyQt5.QtCore import QTimer, Qt
from newsapi import NewsApiClient

# Set up News API client
news_api = NewsApiClient(api_key='be3eab53efa44749943bb924a49fca24')

class NewsDisplayWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        # Set window properties
        self.setWindowTitle("News Display")
        self.setGeometry(0, 0, 800, 480)
        self.setWindowFlags(Qt.FramelessWindowHint)

        # Set up label for displaying news headline and image
        self.news_label = QLabel(self)
        self.news_label.setGeometry(0, 0, 800, 480)
        self.news_label.setAlignment(Qt.AlignCenter)
        self.news_label.setStyleSheet("QLabel { color : white; font-size: 36px; }")

        # Set up timer for updating news every 15 seconds
        self.news_timer = QTimer()
        self.news_timer.timeout.connect(self.update_news)
        self.news_timer.start(15000)

        # Initialize news headline and image
        self.news_headline = ''
        self.news_image_url = ''

        # Update news display
        self.update_news()

    def update_news(self):
        # Get top headlines from News API
        top_headlines = news_api.get_top_headlines(language='en', country='us')

        # Select first headline and extract headline text and image URL
        article = top_headlines['articles'][0]
        self.news_headline = article['title']
        self.news_image_url = article['urlToImage']

        # Download image and set as window background
        image_data = requests.get(self.news_image_url).content
        image = QImage.fromData(image_data)
        palette = QPalette()
        palette.setBrush(QPalette.Background, QBrush(image))
        self.setPalette(palette)

        # Update news label with headline text
        self.news_label.setText(self.news_headline)

    def keyPressEvent(self, event):
        # Close window when 'q' is pressed
        if event.key() == Qt.Key_Q:
            self.close()

if __name__ == "__main__":
    app = QApplication([])
    window = NewsDisplayWindow()
    window.showFullScreen()
    app.exec_()
